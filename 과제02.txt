1. Most binary arithmetic operators are left-associative in most programming languages. In Section 6.1.4, however, we also
noted that most compilers are free to evaluate the operands of a binary operator
in either order. Are these statements contradictory? 
Why or why not?

연산자의 결합 방향성과 피연산자 평가 순서: 결합 방향성(associativity)은 같은 우선순위를 가지는 연산자가 있을 때, 왼쪽에서 오른쪽(왼쪽 결합성) 또는 오른쪽에서 왼쪽(오른쪽 결합성)으로 연산이 수행되는 순서를 의미한다. 하지만 피연산자(operand) 평가 순서는 별개이다. 예를 들어 a + b + c에서 왼쪽 결합성이라면 (a + b) + c 순서로 평가된다. 그러나 컴파일러는 a, b, c를 어떤 순서로 평가할지 선택할 자유가 있다. 따라서 결합 방향성과 피연산자 평가 순서가 다르며, 이 둘은 서로 모순되지 않는다. 결합 방향성은 연산자가 묶이는 순서를 의미하고, 컴파일러는 피연산자 자체의 평가 순서를 자유롭게 결정할 수 있다.

2. As noted in slide #14 of lecture note #06, Fortran and Pascal give unary and binary minus the same
level of precedence. Is this likely to lead to nonintuitive evaluations of certain
expressions? 
Why or why not?

Fortran과 Pascal에서 단항 및 이항 마이너스 연산자의 우선순위: 단항 마이너스와 이항 마이너스의 우선순위가 같을 경우, -a - b와 같은 표현식이 비직관적으로 평가될 수 있다. 일부 언어에서는 단항 마이너스의 우선순위가 더 높아서 -a - b가 (-a) - b로 해석되지만, Fortran과 Pascal처럼 단항 및 이항 마이너스가 같은 우선순위를 가질 경우 해석에 혼동이 생길 수 있다. 이는 개발자가 예상하지 못한 평가 결과를 초래할 수 있다.


3. Languages that employ a reference model of variables also tend to employ auto-
matic garbage collection. Is this more than a coincidence? Explain.

참조 모델과 자동 가비지 컬렉션의 관계: 참조 모델을 사용하는 언어에서 자동 가비지 컬렉션을 사용하는 것은 우연이 아니다. 참조 모델에서는 변수에 저장된 값이 직접 접근되는 것이 아니라 참조를 통해 접근되며, 여러 변수가 동일한 객체를 참조할 수 있어 메모리 관리가 복잡해진다. 자동 가비지 컬렉션은 더 이상 접근할 수 없는 메모리를 자동으로 회수함으로써 메모리 누수나 댕글링 포인터와 같은 문제를 예방하고, 참조 기반 시스템의 메모리 관리 부담을 줄여준다.

4. Is &(&i) ever valid in C? Explain.

C에서 &(&i)의 유효성: &(&i)는 C 언어에서 유효하지 않다. & 연산자는 변수의 주소를 가져오기 때문에 &i는 i의 주소를 가리키는 포인터가 된다. & 연산자는 주소가 아닌 실제 변수에만 사용할 수 있기 때문에 이미 주소인 &i에 &를 적용하는 것은 잘못된 구문이다.
